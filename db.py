# jdbc:postgresql://localhost:5432/bots_db
import psycopg2
from urllib.parse import urlparse

DATABASE_URI = "postgresql://postgres:123456@localhost/postgres"

__connection = None


def get_connection():
    global __connection

    if not __connection:
        result = urlparse("postgresql://postgres:123456@localhost/postgres")
        username = result.username
        password = result.password
        database = result.path[1:]
        hostname = result.hostname
        __connection = psycopg2.connect(
            database=database,
            user=username,
            password=password,
            host=hostname
        )

    return __connection


def init_db(force: bool = None):
    conn = get_connection()

    cursor = conn.cursor()

    if force:
        cursor.execute('DROP TABLE IF EXISTS shows;')
        cursor.execute('DROP TABLE IF EXISTS users;')

    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users(
         id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,
         user_id     INTEGER UNIQUE ,
         first_name        VARCHAR NOT NULL
         ) 
         """)

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS shows(
             id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,
             user_id          INTEGER NOT NULL,
             title          VARCHAR NOT NULL,
             season     INTEGER NOT NULL,
             episode        INTEGER NOT NULL,
             FOREIGN KEY(user_id) REFERENCES users(user_id)
             ) 
             """)

    conn.commit()


def add_user(user_id: int, first_name: str):
    conn = get_connection()
    c = conn.cursor()
    c.execute('Select * from users where user_id = %s;', (user_id,))
    user = c.fetchone()

    if not user:

        c.execute('INSERT INTO users(user_id,first_name) VALUES  (%s,%s);', (user_id, first_name))
        conn.commit()



    else:
        pass


def add_show(title: str, user_id: int, season: int, episode: int):
    title = title.title()
    conn = get_connection()
    c = conn.cursor()
    c.execute('Select * FROM shows WHERE title = %s and user_id = %s ', (title, user_id))
    data = c.fetchone()
    if not data:

        c.execute('INSERT INTO shows(title, user_id,season,episode) VALUES  (%s,%s,%s,%s)',
                  (title, user_id, season, episode))
        conn.commit()


    else:
        pass


def update_show(title: str, user_id: int, season: int, episode: int):
    title = title.title()
    conn = get_connection()
    c = conn.cursor()
    c.execute('UPDATE shows set season = %s,episode = %s WHERE user_id = %s and title = %s',
              (season, episode, user_id, title))
    conn.commit()


def delete_show(title: str, user_id: int):
    title = title.title()
    conn = get_connection()
    c = conn.cursor()
    c.execute('Select * From shows where title = %s;', (title,))
    shows = c.fetchall()

    if not shows:
        raise ValueError

    c.execute('DELETE FROM shows WHERE user_id = %s and title = %s ;',
              (user_id, title))

    conn.commit()


def get_all_shows(user_id: int):
    conn = get_connection()
    c = conn.cursor()
    c.execute('Select * From shows Where user_id = %s  ;', (user_id,))
    data = c.fetchall()

    return data


def get_users_list():
    conn = get_connection()
    c = conn.cursor()
    c.execute('Select * From users ;')
    data = c.fetchall()

    return data

